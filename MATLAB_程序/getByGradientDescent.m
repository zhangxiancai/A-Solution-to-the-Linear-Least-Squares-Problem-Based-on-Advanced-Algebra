function a=getByGradientDescent(data)
%用负梯度下降法找多重线性模型的回归系数，data为数据集，a为训练后的回归系数
[n,s]=size(data);
e=10^-4;%精度
p=-0.00001;%逼近系数
a1=2*rand(s,1);%a1为列向量且为初始的回归系数，也看作为前一循时刻的回归系数
% temp=1;
Y=data(:,s);%Y为数据集中所有真实值构成的列向量
X=data(:,1:s-1);%X为数据集中所有自变量构成的矩阵
C=5*rand(1,n);
a2=a1+ 2*p/n*[X,C']'*([X,C']*a1-Y);%根据初始值做第一次修正，也看作为后一时刻的回归系数
% while true
for i=1:2000
    Y1=[X,C']*a1;%Y1为根据回归系数为前一循环的模型算出的估计值构成的列向量
    Y2=[X,C']*a2;%Y2为根据回归系数为后一循环的模型算出的估计值构成的列向量
    E1=((Y1-Y)'*(Y1-Y))/n;%前一循环的误差平方均值
    E2=((Y2-Y)'*(Y2-Y))/n;%后一循环的误差平方均值
 
    plo(i)=E2;%记录E2值，为后面画图提供数据
    distance=abs(E2-E1);
    if distance<e
        break;
    end
     if isnan(E1)
         fprintf('提示：误差平方和发散了，可能是p值设置过大');
        break;
    end
    dis=2*p/n*[X,C']'*(Y2-Y);
    buff=a2+dis;%修正参数
    a1=a2;
    a2=buff;
%     temp=temp+1;
end
a=a2;

% plot(plo);%画出误差平方和与循环次数的图像
% xlabel('循环次数');ylabel('误差平方均值');title('误差平方均值随循环次数的变化折线图');
end


function data=createTestData()
%创建数据
% for i=1:10
% x1=10*rand();
% x2=10*rand();
% x3=10*rand();
% x4=10*rand();
% x5=10*rand();
% x6=10*rand();
% y=3*x1+4*x2+5*x3+6*x4+7*x5+8*x6+9+100*rand();
% data(i,1)=x1;
% data(i,2)=x2;
% data(i,3)=x3;
% data(i,4)=x4;
% data(i,5)=x5;
% data(i,6)=x6;
% 
% data(i,7)=y;
% end
data=[78.29 62.31 13.83 8.89 4.59 6.21;
     66.08 69.79 18.87 9.72 4.59 6.21;
     33.3 143.39 19.64 8.78 4.59 6.21;
     204.39 127.59 15.77 17.08 4.05 5.4;
     151.28 151.76 14.73 13.01 4.05 5.4;
     167.89 227.04 16.78 10.39 4.23 5.72;
     195.82 298.8 11.72 15.12 4.41 5.72;
     131.02 195.92 16.33 18.87 4.59 6.12;
     193.66 293.87 15.4 11.55 5.22 6.92];
end


